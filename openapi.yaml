openapi: 3.0.0
info:
  title: TrustLens API
  version: 1.0.0
  description: AI-powered authenticity verification platform for e-commerce
  contact:
    name: TrustLens Support
    email: support@trustlens.com
    url: https://trustlens.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.trustlens.com
    description: Production server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Basic health check
      description: Returns basic application health status
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    description: Uptime in seconds
                  version:
                    type: string
                    example: "1.0.0"

  /api/v1/uploads:
    post:
      summary: Upload file for analysis
      description: Upload an image or video file for authenticity verification
      tags:
        - Uploads
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image or video file to analyze
                merchant_id:
                  type: string
                  description: Optional merchant identifier
                metadata:
                  type: object
                  description: Additional metadata about the upload
              required:
                - file
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/analysis/{upload_id}:
    get:
      summary: Get analysis results
      description: Retrieve the authenticity analysis results for an upload
      tags:
        - Analysis
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
          description: Upload identifier
      responses:
        '200':
          description: Analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        '404':
          description: Upload not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '202':
          description: Analysis still in progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "processing"
                  estimated_completion:
                    type: string
                    format: date-time

  /api/v1/badge/{upload_id}:
    get:
      summary: Get trust badge data
      description: Get trust badge information for displaying to buyers
      tags:
        - Badge
      security: []
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
          description: Upload identifier
      responses:
        '200':
          description: Trust badge data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustBadge'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and return access token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Refresh access token
      description: Use refresh token to get new access token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - refresh_token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/v1/merchants:
    get:
      summary: List merchants
      description: Get list of merchants for the authenticated organisation
      tags:
        - Merchants
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of merchants
          content:
            application/json:
              schema:
                type: object
                properties:
                  merchants:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object

    post:
      summary: Create merchant
      description: Create a new merchant integration
      tags:
        - Merchants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shop_platform:
                  type: string
                  enum: [shopify, woocommerce, magento, bigcommerce, api]
                shop_id:
                  type: string
                shop_url:
                  type: string
                settings:
                  type: object
              required:
                - shop_platform
                - shop_id
      responses:
        '201':
          description: Merchant created successfully

  /api/v1/admin/reviews:
    get:
      summary: Get review queue
      description: Get pending analysis reviews for manual verification
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_review, resolved, escalated]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, normal, high, urgent]
      responses:
        '200':
          description: Review queue items
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      type: object

  /webhooks/shopify:
    post:
      summary: Shopify webhook
      description: Receive webhooks from Shopify for product updates
      tags:
        - Webhooks
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Shopify webhook payload
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook payload

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for merchant/enterprise access
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated users

  schemas:
    Error:
      type: object
      required:
        - error
        - message
        - code
      properties:
        error:
          type: string
          description: Error type
          example: "Validation Error"
        message:
          type: string
          description: Human-readable error message
          example: "The uploaded file is not a valid image format"
        code:
          type: string
          description: Machine-readable error code
          example: "INVALID_FILE_FORMAT"
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: "/api/v1/uploads"
        method:
          type: string
          example: "POST"

    UploadResponse:
      type: object
      required:
        - upload_id
        - status
        - analysis_url
      properties:
        upload_id:
          type: string
          description: Unique identifier for the upload
          example: "clh5x8k2p0000qh8v4g8v4g8v"
        status:
          type: string
          enum: [pending, processing, completed, failed]
          description: Current status of the upload
          example: "pending"
        analysis_url:
          type: string
          format: uri
          description: URL to retrieve analysis results
          example: "https://api.trustlens.com/v1/analysis/clh5x8k2p0000qh8v4g8v4g8v"
        estimated_completion:
          type: string
          format: date-time
          description: Estimated completion time
          example: "2024-08-12T12:25:00Z"

    AnalysisResult:
      type: object
      required:
        - upload_id
        - aggregated_score
        - verdict
        - evidence
        - analysis_version
        - completed_at
      properties:
        upload_id:
          type: string
          description: Upload identifier
          example: "clh5x8k2p0000qh8v4g8v4g8v"
        merchant_id:
          type: string
          description: Merchant identifier
          example: "shopify-merchant-123"
        aggregated_score:
          type: integer
          minimum: 0
          maximum: 100
          description: Overall authenticity score (0-100)
          example: 87
        verdict:
          type: string
          enum: [safe, caution, suspect]
          description: Final verdict based on score thresholds
          example: "safe"
        evidence:
          type: array
          description: Array of evidence objects from different checks
          items:
            type: object
            properties:
              source:
                type: string
                description: Evidence source
                example: "c2pa"
              result:
                type: object
                description: Source-specific results
              confidence:
                type: number
                minimum: 0
                maximum: 1
                description: Confidence score for this evidence
                example: 0.95
        report_pdf_url:
          type: string
          format: uri
          description: URL to download detailed PDF report
          example: "https://s3.trustlens.com/reports/clh5x8k2p0000qh8v4g8v4g8v.pdf"
        analysis_version:
          type: string
          description: Version of the analysis pipeline used
          example: "v1.0.0"
        analysis_partial:
          type: boolean
          description: Whether analysis was completed with all checks
          example: false
        processing_time_ms:
          type: integer
          description: Total processing time in milliseconds
          example: 4250
        completed_at:
          type: string
          format: date-time
          description: When analysis was completed
          example: "2024-08-12T12:23:45Z"

    AuthResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "Bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: string
              example: "clh5x8k2p0000qh8v4g8v4g8v"
            email:
              type: string
              format: email
              example: "user@example.com"
            role:
              type: string
              enum: [admin, merchant, reviewer, support]
              example: "merchant"

    TrustBadge:
      type: object
      required:
        - badge_type
        - score
        - verification_url
      properties:
        badge_type:
          type: string
          enum: [verified, caution, suspect, unverified]
          description: Visual badge type to display
          example: "verified"
        score:
          type: integer
          minimum: 0
          maximum: 100
          description: Authenticity score
          example: 87
        verification_url:
          type: string
          format: uri
          description: URL to verification details
          example: "https://verify.trustlens.com/clh5x8k2p0000qh8v4g8v4g8v"
        last_verified:
          type: string
          format: date-time
          description: When the item was last verified
          example: "2024-08-12T12:23:45Z"
        merchant_verified:
          type: boolean
          description: Whether the merchant is verified
          example: true
