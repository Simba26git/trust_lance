version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api
    restart: unless-stopped

  # Main API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - API_KEY=${API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shopify plugin service
  shopify-plugin:
    build:
      context: ./plugins/shopify
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
      - SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET}
      - TRUSTLENS_API_URL=http://api:3001
      - TRUSTLENS_API_KEY=${API_KEY}
      - SESSION_SECRET=${SHOPIFY_SESSION_SECRET}
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BigCommerce plugin service
  bigcommerce-plugin:
    build:
      context: ./plugins/bigcommerce
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - BC_CLIENT_ID=${BC_CLIENT_ID}
      - BC_CLIENT_SECRET=${BC_CLIENT_SECRET}
      - TRUSTLENS_API_URL=http://api:3001
      - TRUSTLENS_API_KEY=${API_KEY}
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trustlens-postgres
    environment:
      POSTGRES_DB: trustlens
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trustlens-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Queue and Cache
  redis:
    image: redis:7-alpine
    container_name: trustlens-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trustlens-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: trustlens-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - trustlens-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TrustLens Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: trustlens-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/trustlens
      REDIS_URL: redis://redis:6379
      AWS_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_S3_BUCKET: trustlens-uploads
      AWS_REGION: us-east-1
      AWS_S3_FORCE_PATH_STYLE: true
    volumes:
      - ./src:/app/src
      - ./test_images:/app/test_images
      - uploads_temp:/app/uploads
    networks:
      - trustlens-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TrustLens Worker Process
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: trustlens-worker
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/trustlens
      REDIS_URL: redis://redis:6379
      AWS_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_S3_BUCKET: trustlens-uploads
      AWS_REGION: us-east-1
      AWS_S3_FORCE_PATH_STYLE: true
    volumes:
      - ./src:/app/src
      - ./test_images:/app/test_images
    networks:
      - trustlens-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped

  # TrustLens Frontend (Admin Dashboard)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: trustlens-frontend
    ports:
      - "3001:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_key
    volumes:
      - ./frontend/src:/app/src
    networks:
      - trustlens-network
    depends_on:
      - backend
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: trustlens-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trustlens-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: trustlens-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - trustlens-network
    depends_on:
      - prometheus

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: trustlens-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - trustlens-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

networks:
  trustlens-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  uploads_temp:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
